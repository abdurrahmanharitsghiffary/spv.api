// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl= env("DIRECT_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  firstName            String                @db.VarChar(125)
  lastName             String                @db.VarChar(125)
  fullName             String?               @db.VarChar(250)
  username             String                @db.VarChar(100)
  isOnline             Boolean               @default(false)
  lastOnline           DateTime?
  email                String                @unique @db.VarChar(100)
  hashedPassword       String                @db.VarChar(100)
  profile              Profile?
  role                 Role                  @default(user)
  googleId             String?               @unique
  provider             AuthProvider?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  verified             Boolean               @default(false)
  refreshToken         RefreshToken?         @relation("RefreshToken")
  tokens               Token[]               @relation("Token")
  authoredChats        Chat[]                @relation("AuthoredChat")
  blocked              User[]                @relation("BlockedUsers")
  blocking             User[]                @relation("BlockedUsers")
  following            User[]                @relation("UserFollows")
  followedBy           User[]                @relation("UserFollows")
  followedPost         SavedPost[]
  readedMessages       MessageRead[]
  chatRoom             ChatRoomParticipant[]
  sendedNotifications  Notification[]        @relation("SendedNotifications")
  notifications        Notification[]        @relation("ReceivedNotifications")
  posts                Post[]
  report               Report[]              @relation("Reporter")
  reportedUser         Report[]              @relation("ReportedUser")
  reportedBugs         Bug[]
  comments             Comment[]
  requestedApplication ApplicationRequest[]
  commentLikes         CommentLike[]
  likes                PostLike[]

  @@map("users")
}

enum AuthProvider {
  GOOGLE
}

enum Gender {
  male
  female
}

model Profile {
  id                 Int         @id @default(autoincrement())
  profileDescription String?     @db.Text
  birthDate          DateTime?
  gender             Gender?
  avatarImage        Image?      @relation(name: "ProfileImage")
  coverImage         CoverImage?
  userId             String      @unique @db.VarChar(100)

  user User @relation(fields: [userId], references: [email], onDelete: Cascade)

  @@map("profiles")
}

model Post {
  id        Int         @id @default(autoincrement())
  authorId  Int
  images    Image[]     @relation(name: "PostImages")
  title     String?     @db.VarChar(255)
  content   String      @db.Text
  comments  Comment[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     PostLike[]
  type      PostType    @default(public)
  follower  SavedPost[]
  tags      PostTag[]

  report       Report[]
  notification Notification[]
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostTag {
  id        Int      @id @default(autoincrement())
  tag       String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post[]

  @@map("post_tags")
}

model SavedPost {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     Int
  userId     Int
  assignedAt DateTime @default(now())

  @@id([postId, userId])
  @@map("saved_posts")
}

enum PostType {
  public
  private
  friends
}

model Comment {
  id              Int           @id @default(autoincrement())
  postId          Int
  userId          Int
  image           Image?        @relation(name: "CommentImage")
  comment         String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  parentId        Int?
  likes           CommentLike[]
  parentComment   Comment?      @relation("ReplyComment", fields: [parentId], references: [id], onDelete: Cascade)
  childrenComment Comment[]     @relation("ReplyComment")

  report       Report[]
  notification Notification[]
  post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model CommentLike {
  userId    Int
  commentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, commentId])
  @@map("comment_likes")
}

model PostLike {
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@map("post_likes")
}

enum Role {
  admin
  user
}

model Image {
  id        Int       @id @default(autoincrement())
  src       String
  postId    Int?
  profileId Int?      @unique
  commentId Int?      @unique
  chatId    Int?
  reportId  Int?
  // chat Chat[]
  groupId   Int?      @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bugId     Int?      @unique
  bug       Bug?      @relation(fields: [bugId], references: [id], onDelete: Cascade)
  report    Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  group     ChatRoom? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  chat      Chat?     @relation("ChatImage", fields: [chatId], references: [id], onDelete: Cascade)
  profile   Profile?  @relation("ProfileImage", fields: [profileId], references: [id], onDelete: Cascade)
  comment   Comment?  @relation("CommentImage", fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?     @relation("PostImages", fields: [postId], references: [id], onDelete: Cascade)

  @@map("images")
}

model CoverImage {
  id        Int      @id @default(autoincrement())
  src       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId Int?     @unique

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("cover_images")
}

model RefreshToken {
  id           Int    @id @default(autoincrement())
  refreshToken String @unique @map("refresh_token") @db.VarChar(255)
  userId       Int    @unique
  user         User   @relation("RefreshToken", fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model Token {
  id         Int       @id @default(autoincrement())
  token      String    @unique @db.VarChar(255)
  userEmail  String    @db.VarChar(100)
  createdAt  DateTime  @default(now())
  expires_in DateTime
  type       TokenType
  user       User      @relation("Token", fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("tokens")
}

model ChatRoom {
  id                 Int                   @id @default(autoincrement())
  participants       ChatRoomParticipant[]
  messages           Chat[]
  groupVisibility    GroupType             @default(public)
  applyType          ApplyType             @default(public)
  applicationRequest ApplicationRequest[]
  groupPicture       Image?
  description        String?               @db.Text
  title              String?               @db.VarChar(125)
  isGroupChat        Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  report       Report[]
  notification Notification[]

  @@map("chat_rooms")
}

enum GroupType {
  public
  private
}

enum ApplyType {
  public
  private
}

model ChatRoomParticipant {
  chatRoomId Int
  chatRoom   ChatRoom        @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  role       ParticipantRole
  userId     Int
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@id([chatRoomId, userId])
  @@map("chat_room_participants")
}

enum ParticipantRole {
  creator
  co_creator
  admin
  user
}

model Chat {
  id         Int           @id @default(autoincrement())
  message    String?       @db.Text
  chatRoomId Int
  chatRoom   ChatRoom      @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatImage  Image[]       @relation("ChatImage")
  readedBy   MessageRead[]
  authorId   Int
  author     User          @relation("AuthoredChat", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  report Report[]

  @@map("chats")
}

model MessageRead {
  userId    Int
  chatId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, chatId])
  @@map("message_reads")
}

enum TokenType {
  reset_token
  verify_token
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     Int
  receiverId Int
  isRead     Boolean          @default(false)
  postId     Int?
  groupId    Int?
  commentId  Int?
  type       NotificationType
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  group    ChatRoom? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  post     Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  receiver User      @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  user     User      @relation("SendedNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  liking_post
  rejected_group_application
  accepted_group_application
  liking_comment
  comment
  follow
  replying_comment
}

model ApplicationRequest {
  id        Int                      @id @default(autoincrement())
  type      ApplicationRequestType
  comment   String?                  @db.Text
  userId    Int
  user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   Int
  group     ChatRoom                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  status    ApplicationRequestStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  @@map("application_requests")
}

enum ApplicationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationRequestType {
  group_chat
  group_community
}

model Report {
  id         Int        @id @default(autoincrement())
  reporterId Int
  report     String     @db.Text
  images     Image[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  type       ReportType

  userId    Int?
  postId    Int?
  commentId Int?
  groupId   Int?
  messageId Int?

  reporter     User      @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUser User?     @relation("ReportedUser", fields: [userId], references: [id], onDelete: Cascade)
  post         Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment      Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  group        ChatRoom? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  message      Chat?     @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Bug {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isResolved  Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bugs")
}

enum ReportType {
  user
  post
  comment
  message
  group
}
